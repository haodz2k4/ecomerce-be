// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

enum Status {
  active 
  inactive
}

model Users {
  id String @id @default(uuid())
  fullName String  
  avatar String? 
  email String @unique
  password String
  gender Gender? 
  status  Status? @default(active) 
  verified Boolean? @default(false)
  birthDate DateTime? 
  roleId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt DateTime?
  orders Orders[]
}

model Sessions {
  id String @id @default(uuid())
  expiresIn DateTime
  userId String 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Roles {
  id          String  @id @default(uuid())
  title       String
  description String?
  status      Status  @default(active)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  permissions Roles_permissions[]
}

enum CrudEnum {
  create 
  read
  update
  delete
}

model Permissions {
  id         String  @id @default(uuid())
  name       CrudEnum
  resource   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  roles      Roles_permissions[]
}

model Roles_permissions {
  id           Int    @id @default(autoincrement())
  roleId       String
  permissionId String
  role        Roles @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission  Permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Products {
  id String @id @default(uuid())
  title String 
  description String? 
  categoryId String 
  category Categories @relation(fields: [categoryId], references: [id])
  discountPercentage Int? @default(0)
  price Int
  status Status @default(active)
  thumbnail String? 
  slug String @unique

  images Products_images[] 
  inventories Inventories[] 
  ordersItems Orders_items[]
  cartsItems Carts_items[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

model Products_images {
  id Int @id @default(autoincrement())
  productId String 
  product Products @relation(fields: [productId], references: [id])
  url String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Categories {
  id String @id @default(uuid())
  title String
  description String?
  thumbnail String?
  slug String @unique
  products Products[] 
  status Status @default(active)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

model Inventories {
  id String @id @default(uuid())
  productId String 
  product Products @relation(fields: [productId], references: [id])
  supplier String 
  address String 
  quantity Int 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}


model Carts {
  id Int @id @default(autoincrement())
  userId String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartsItems Carts_items[]
}

model Carts_items{
  id Int @id @default(autoincrement())
  cartId Int 
  cart Carts @relation(fields: [cartId], references: [id])
  productId String
  product Products @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StatusOrder {
  pending 
  confirmed
  processing
  shipped
  delivered
  canceled 
  failed
}

model Orders {
  id String @id @default(uuid())
  userId String?
  user Users? @relation(fields: [userId], references: [id])
  ordersItems Orders_items[]
  status StatusOrder
  phone String 
  address String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Orders_items {
  id Int @id @default(autoincrement())
  productId String
  product Products @relation(fields: [productId], references: [id])
  orderId String
  orders Orders @relation(fields: [orderId], references: [id])
  price Int
  quantity Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}